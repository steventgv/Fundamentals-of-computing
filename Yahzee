"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand): 
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    scores=[dummy_num*hand.count(dummy_num) for dummy_num in range(7)]
    
    return max(scores)

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    e_value=0
    all_free_dice_seq= gen_all_sequences(range(1,num_die_sides+1), num_free_dice)
    all_free_dice_seq=list(all_free_dice_seq)
    held_dice=list(held_dice)
    
    b_possible_result=[held_dice+list(element) for element in all_free_dice_seq]
        
    for member in b_possible_result:
        e_value+=float(score(member))/num_die_sides**num_free_dice
        
    return e_value



def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    answer_set= set([()])
    temp_set=set([()])
    for item in hand:
        for element in answer_set:    
            new_seq=list(element)
            new_seq.append(item)
            temp_set.add(tuple(new_seq))
        answer_set=temp_set   
        copy_of_answer_set=answer_set
        answer_set=answer_set.union(copy_of_answer_set)
    return answer_set

def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    all_holds=gen_all_holds(hand)
    all_holds=list(all_holds)
    expected_value_list=[]
    for element in all_holds:
        expected_value_list.append(expected_value(element,num_die_sides,len(hand)-len(element)))   
    return (max(expected_value_list), all_holds[expected_value_list.index(max(expected_value_list))])



def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
run_example()


#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
                   
