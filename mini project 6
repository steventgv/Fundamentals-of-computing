# http://www.codeskulptor.org/#user47_HEokr3mFdV_6.py

# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
            # create Hand object
            self.cards=[]

    def __str__(self):
        total ="Hand contains "
        for card in self.cards:
            total+=str(card)+" "
        return total	# return a string representation of a hand

    def add_card(self, card):
        self.cards.append(card)
        return self.cards# add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust        
        total_value=0 
        
        suits=[]
        for card in self.cards:  
            suits.append(str(card)[1])
        
        if len(self.cards)>=0: 
            for card in self.cards:               
                total_value+=VALUES[str(card)[1]]
            if 'A' not in suits:
                return total_value
            else:                
                if total_value+10<=21:
                    return total_value+10
                else:
                    return total_value                   
        else:
             return self.cards 	# compute the value of the hand, see Blackjack video
                   
    def draw(self, canvas, pos):
            # draw a hand on the canvas, use the draw method for cards           
            for card in self.cards:
                card.draw(canvas,[pos[0]+self.cards.index(card)*100,pos[1]])            
            
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.decks=[]
        for suit in SUITS:
            for rank in RANKS:
                self.decks.append(Card(suit,rank))

    def shuffle(self):
        # shuffle the deck
        # use random.shuffle()
        random.shuffle(self.decks)
        
    def deal_card(self):
        return self.decks.pop()	# deal a card object from the deck
    
    def __str__(self):
        total="Deck contains "	# return a string representing the deck
        for deck in self.decks:
            total+=str(deck)+" "
        return total

my_deck=Deck()
my_hand=Hand()
dealer_hand=Hand()

#define event handlers for buttons
def deal():
    global outcome, in_play,my_deck,my_hand,dealer_hand
    # your code goes here 
    if in_play==True:
        outcome='You lose'
        score=-1
        my_deck=Deck()
        my_hand=Hand()
        dealer_hand=Hand()
        my_deck.shuffle()   
        dealer_hand.add_card(my_deck.deal_card())
        dealer_hand.add_card(my_deck.deal_card())
        my_hand.add_card(my_deck.deal_card())
        my_hand.add_card(my_deck.deal_card())
        
    else:
        my_deck=Deck()
        my_hand=Hand()
        dealer_hand=Hand()
        my_deck.shuffle()   
        dealer_hand.add_card(my_deck.deal_card())
        dealer_hand.add_card(my_deck.deal_card())
        my_hand.add_card(my_deck.deal_card())
        my_hand.add_card(my_deck.deal_card())
        in_play = True

def hit():
    global score,outcome,my_hand   
    # if the hand is in play, hit the player
    
    if my_hand.get_value()<=21:
            in_play=True
            my_hand.add_card(my_deck.deal_card())
            
    if my_hand.get_value()>21:
        outcome="You have busted!"
        #print(outcome) 
        score-=1
        in_play=False
    print(my_hand.get_value())
        
def stand():
    # replace with your code below
        global outcome, in_play,score
        in_play=False
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
        if my_hand.get_value()>21:
            outcome="You have busted!"
            #print(outcome)   
            in_play=False
        else:
            if dealer_hand.get_value()<=17:
                dealer_hand.add_card(my_deck.deal_card())
            
    # assign a message to outcome, update in_play and score 
        if dealer_hand.get_value()>17:
            outcome="Dealer has busted!"
            #print(outcome)    
            score+=1 
            in_play=False
        else:
            
            if my_hand.get_value()<=dealer_hand.get_value():
                outcome="Dealer wins!"
                score-=1
                in_play=False
            else:
                outcome="You win!"
                score+=1
                in_play=False
            #print(dealer_hand.get_value())
        
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below    
    card = Card("S", "A")    
    dealer_hand.draw(canvas,[100,100])
    my_hand.draw(canvas,[100,300])
    canvas.draw_text('Blackjack', (180, 30), 27, 'White')
    canvas.draw_text('Dealer', (100, 70), 27, 'White')
    canvas.draw_text(outcome, (250, 70), 27, 'White')
    canvas.draw_text('Score '+str(score), (500, 70), 27, 'White')
    canvas.draw_text('Player', (100, 270), 27, 'White')
    if in_play==False:
        canvas.draw_text('New deal?', (250, 270), 27, 'White')
    else:    
        canvas.draw_text('Hit or Stand?', (250, 270), 27, 'White')
    
    if in_play==True:
        card_loc = (CARD_BACK_CENTER[0]+CARD_BACK_SIZE[0] , CARD_BACK_CENTER[1])
        canvas.draw_image(card_back, card_loc, CARD_SIZE, [100 + CARD_BACK_CENTER[0], 100 + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
      
    
#initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling

deal()
frame.start()


# remember to review the gradic rubric
