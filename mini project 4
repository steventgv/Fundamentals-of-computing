# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_pos=HEIGHT/2
paddle2_pos=HEIGHT/2
paddle1_vel=0
paddle2_vel=0
score1=0
score2=0
color="White"

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos=[WIDTH/2,HEIGHT/2]
    
    if direction=="RIGHT":
        ball_vel=[random.randrange(120, 240)/60,-random.randrange(60, 180)/60]
    if direction=="LEFT":
        ball_vel=[-random.randrange(120, 240)/60,-random.randrange(60, 180)/60]
    


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1=0
    score2=0
    spawn_ball("RIGHT")

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos,ball_vel,color 
    
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0]+=ball_vel[0]
    ball_pos[1]+=ball_vel[1]
    
    
    if ball_pos[1]>=HEIGHT-BALL_RADIUS:
        ball_vel[1]=-ball_vel[1]
    if ball_pos[1]<=BALL_RADIUS:
        ball_vel[1]=-ball_vel[1]
            
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 10, color, color)
    # update paddle's vertical position, keep paddle on the screen    
    if (paddle1_pos+paddle1_vel)>=PAD_HEIGHT/2 and (paddle1_pos+paddle1_vel)<HEIGHT-PAD_HEIGHT/2:
        paddle1_pos+=paddle1_vel
    if (paddle2_pos+paddle2_vel)>=PAD_HEIGHT/2 and (paddle2_pos+paddle2_vel)<HEIGHT-PAD_HEIGHT/2:
        paddle2_pos+=paddle2_vel
       
        
        
    # draw paddles
    canvas.draw_line((2,paddle1_pos-(PAD_HEIGHT/2)),(2,paddle1_pos+(PAD_HEIGHT/2)),PAD_WIDTH,'White')
    canvas.draw_line((WIDTH-HALF_PAD_WIDTH,paddle2_pos-PAD_HEIGHT/2),(WIDTH-HALF_PAD_WIDTH,paddle2_pos+PAD_HEIGHT/2),PAD_WIDTH,'White')
    
    # determine whether paddle and ball collide
    
    if ball_pos[0]>WIDTH-BALL_RADIUS-PAD_WIDTH:           
        score1+=1
        spawn_ball("LEFT")
            
    if (ball_pos[0]>=WIDTH-BALL_RADIUS-PAD_WIDTH-5 and ball_pos[0]<=WIDTH-BALL_RADIUS)and(ball_pos[1]<=paddle2_pos++PAD_HEIGHT/2+5 and ball_pos[1]>=paddle2_pos-PAD_HEIGHT/2-5):
        ball_vel[0]=-ball_vel[0]
        ball_vel[0]=ball_vel[0]*1.1
        ball_vel[1]=ball_vel[1]*1.1
        
    if ball_pos[0]<BALL_RADIUS+PAD_WIDTH:           
        score2+=1
        spawn_ball("RIGHT")
            
    if (ball_pos[0]>=BALL_RADIUS and ball_pos[0]<=BALL_RADIUS+PAD_WIDTH+5)and(ball_pos[1]<=paddle1_pos+PAD_HEIGHT/2+5 and ball_pos[1]>=paddle1_pos-PAD_HEIGHT/2-5):
        ball_vel[0]=-ball_vel[0]
        ball_vel[0]=ball_vel[0]*1.1
        ball_vel[1]=ball_vel[1]*1.1
    
        
    
    # draw scores
    canvas.draw_text(str(score1), (20, 20), 30, 'White')
    canvas.draw_text(str(score2), (350, 20), 30, 'White')
def keydown(key):
    global paddle1_vel, paddle2_vel,paddle2_pos
    acc=2
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel+=acc
        
    if key==simplegui.KEY_MAP["s"]:
        paddle1_vel+=acc
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    acc=2
    if key==simplegui.KEY_MAP["up"]:
        paddle2_vel-=acc
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel-=acc
def button_handler():
    global score1, score2
    score1=0
    score2=0
    new_game()
    #spawn_ball("RIGHT")
    

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('restart', button_handler)

# start frame
new_game()
frame.start()
